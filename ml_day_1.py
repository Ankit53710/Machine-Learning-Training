# -*- coding: utf-8 -*-
"""ML day 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12vJQX_2XvDPyaOG4-oGxEdY_abnZ9uHD
"""

from sklearn.preprocessing import MinMaxScaler  # sklern is a library, preprocesing is a module where
data=[[5,200],[2,359],[8,120],[1,23]] #min-max scaler can't recognise outlier
scaler=MinMaxScaler()
print(scaler.fit_transform(data))

from sklearn.preprocessing import StandardScaler  # sklern is a library, preprocesing is a module whe
data=[[5,200],[2,359],[8,120],[1,23]] # recognise outlier
scaler=StandardScaler()
print(scaler.fit_transform(data))

import numpy as np
data=['blue','red','blue','yellow','black']
data3=np.array(data)
from sklearn.preprocessing import OneHotEncoder # use when no order is require
a=OneHotEncoder()
print(a.fit_transform(data3[:,np.newaxis]).toarray())

import numpy as np
data=['blue','red','blue','yellow','black']
data3=np.array(data)
from sklearn.preprocessing import OrdinalEncoder # use when  order is require
a=OrdinalEncoder()
print(a.fit_transform(data3[:,np.newaxis]).astype(int))

"""**Finding Outlier**"""

data=[25,30,31,33,37,40,100]
import numpy as n
q1=n.percentile(data,25)
q3=n.percentile(data,75)
IQR=q3-q1
max=q3+(1.5*IQR)
min=q1-(1.5*IQR)
outlier=[]
for i in data:
  if i>max or i<min:
    outlier.append(i)
outlier

"""**Built-in dataset importing**"""

from sklearn.datasets import load_iris
dataset=load_iris()
dataset

#target data in dataset
D=dataset.target
D

x=dataset.data

from sklearn.decomposition import PCA
pca=PCA(n_components=3)
xnew=pca.fit_transform(x)
xnew

import matplotlib.pyplot as plt
plt.scatter(xnew[:,0],xnew[:,2],c=dataset['target'])

