# -*- coding: utf-8 -*-
"""ML day4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MJlmp0HuacHa6IVTbPJRWPPmMXsguxqk

CNN project
"""

#classification types
# binary ,multi-label,multi-class
#confusion matrics
#scores-precision=tp/tp+fp,Recall=tp/tp+fn,F1=2*precision*recall/precision+recall for multi-class

from keras.datasets import mnist
(xtrain,ytrain),(xtest,ytest)=mnist.load_data()

index=777
import matplotlib.pyplot as plt
plt.imshow(xtrain[index],cmap='Greys')

xtrain[index].shape

from keras.models import Sequential
from keras.layers import Dense,Flatten,Dropout
from keras.callbacks import EarlyStopping
model=Sequential()
model.add(Flatten(input_shape=(28,28)))#one daimention by flatten
model.add(Dense(28,activation='relu'))
model.add(Dropout(0.2))#using for inactive some neurantions
model.add(Dense(28,activation='relu'))
model.add(Dense(10,activation='softmax'))
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])
es=EarlyStopping(monitor='loss',min_delta=0.001,patience=2,mode='auto')#day 6
hs=model.fit(xtrain,ytrain,callbacks=[es],epochs=10)

import matplotlib.pyplot as plt
plt.plot(hs.history['loss'])
plt.legend(['vallos'])

ypred=model.predict(xtest)
ypred

plt.imshow(xtest[8])

import numpy as np
for i in range(len(ypred)):
  j=np.argmax(ypred[i,:])#argmax return highest value index
  ypred[i,0]=0
  ypred[i,1]=0
  ypred[i,2]=0
  ypred[i,j]=1


ypred.astype('int')

#convolution operation
#filter or kernel
#pooling=max,average
#flatting of features map

from keras.datasets import mnist
from keras.layers import Conv2D,MaxPool2D,Flatten,Dense
xtrain1=xtrain.reshape(xtrain.shape[0],28,28,1)
xtest1=xtest.reshape(xtest.shape[0],28,28,1)
from keras.models import Sequential
from keras.callbacks import EarlyStopping#day 6
model=Sequential()
model.add(Conv2D(28,kernel_size=(3,3),input_shape=(28,28,1)))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(128,activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(10,activation='softmax'))
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])
es=EarlyStopping(monitor='accuracy',min_delta=0.001,patience=3,mode='auto')#day 6

model.fit(xtrain1,ytrain,callbacks=[es],epochs=5)

ypred=model.predict(xtest1)
ypred
b=ypred[7]
ypred.shape

import numpy as np
j=np.argmax(b)
b=[0,0,0,0,0,0,0,0,0,0]
b[j]=1
b

import matplotlib.pyplot as plt
plt.imshow(xtest[7])

